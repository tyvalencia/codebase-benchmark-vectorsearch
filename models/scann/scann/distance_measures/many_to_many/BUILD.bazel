package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],
)

cc_library(
    name = "many_to_many_templates",
    hdrs = ["many_to_many_templates.h"],
    textual_hdrs = ["many_to_many_impl.inc"],
    deps = [
        ":fp8_transposed",
        ":many_to_many_common",
        ":many_to_many_flags",
        "//scann/data_format:dataset",
        "//scann/distance_measures:distance_measure_base",
        "//scann/distance_measures/one_to_many",
        "//scann/distance_measures/one_to_one:dot_product",
        "//scann/utils:types",
        "//scann/utils/intrinsics:fma",
        "//scann/utils/intrinsics:highway",
        "//scann/utils/intrinsics:horizontal_sum",
        "//scann/utils/intrinsics:simd",
    ],
)

# Abridged version of the many_to_many library that only supports float and double.  Useful for
# clients who don't need orthogonality amplification or FP8 support, and can't accept the larger
# binary size.
#
# NOTE:  Forcing low-level modules to always compile in optimized mode to
# avoid excessive stack usage due to lack of compiler optimization.  This
# avoids stack overflows in partner tests.
cc_library(
    name = "many_to_many_floating_point",
    srcs = [
        "many_to_many_double.cc",
        "many_to_many_float.cc",
    ],
    hdrs = [
        "many_to_many_floating_point.h",
    ],
    copts = [
        "-O3",
        "-Wno-pass-failed",
    ],
    textual_hdrs = ["many_to_many_impl.inc"],
    deps = [
        ":many_to_many_common",
        ":many_to_many_flags",
        ":many_to_many_templates",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures",
        "//scann/distance_measures/one_to_many",
        "//scann/distance_measures/one_to_one:dot_product",
        "//scann/utils:common",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:types",
        "//scann/utils/intrinsics:fma",
        "//scann/utils/intrinsics:highway",
        "//scann/utils/intrinsics:horizontal_sum",
        "//scann/utils/intrinsics:simd",
    ],
)

# NOTE:  Forcing low-level modules to always compile in optimized mode to
# avoid excessive stack usage due to lack of compiler optimization.  This
# avoids stack overflows in partner tests.
cc_library(
    name = "many_to_many",
    srcs = [
        "many_to_many_fixed8.cc",
        "many_to_many_orthogonality_amplification.cc",
    ],
    hdrs = [
        "many_to_many.h",
        "many_to_many_templates.h",
    ],
    copts = [
        "-O3",
        "-Wno-pass-failed",
    ],
    textual_hdrs = ["many_to_many_impl.inc"],
    deps = [
        ":fp8_transposed",
        ":many_to_many_common",
        ":many_to_many_flags",
        ":many_to_many_floating_point",  # buildcleaner: export
        ":many_to_many_templates",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures",
        "//scann/distance_measures/one_to_many",
        "//scann/distance_measures/one_to_one:dot_product",
        "//scann/utils:common",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:types",
        "//scann/utils/intrinsics:fma",
        "//scann/utils/intrinsics:highway",
        "//scann/utils/intrinsics:horizontal_sum",
        "//scann/utils/intrinsics:simd",
    ],
)

cc_library(
    name = "many_to_many_flags",
    srcs = ["many_to_many_flags.cc"],
    hdrs = ["many_to_many_flags.h"],
    deps = [
        "@com_google_absl//absl/flags:flag",
    ],
)

cc_library(
    name = "many_to_many_common",
    hdrs = ["many_to_many_common.h"],
    deps = [
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures",
        "//scann/oss_wrappers:scann_threadpool",
        "//scann/utils:common",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:types",
        "//scann/utils/intrinsics:highway",
        "//scann/utils/intrinsics:simd",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/base:prefetch",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "fp8_transposed",
    srcs = ["fp8_transposed.cc"],
    hdrs = ["fp8_transposed.h"],
    deps = [
        "//scann/data_format:dataset",
        "//scann/utils:types",
        "//scann/utils/intrinsics:flags",
        "//scann/utils/intrinsics:highway",
    ],
)
